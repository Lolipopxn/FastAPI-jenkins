pipeline {
    agent {
        docker {
            image 'python:3.11'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        SONARQUBE = credentials('sonar-token2')
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Lolipopxn/FastAPI-jenkins.git'
            }
        }
        stage('Setup venv') {
            steps {
                sh '''
                python3 -m venv venv
                . venv/bin/activate
                pip install --upgrade pip
                pip install -r requirements.txt
                pip install pytest-cov
                '''
            }
        }
        stage('Run Tests & Coverage') {
            steps {
                sh 'venv/bin/pytest --maxfail=1 --disable-warnings -q --cov=app --cov-report=xml'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'sonar-token2', variable: 'SONAR_TOKEN')]) {
                sh '''
                    set -e
                    [ -f coverage.xml ] || (echo "coverage.xml not found" && exit 1)
                    SCANNER_DIR=".scanner"
                    mkdir -p "$SCANNER_DIR"
                    curl -Ls https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip -o scanner.zip
                    unzip -q scanner.zip -d "$SCANNER_DIR"
                    export PATH="$PWD/$SCANNER_DIR/sonar-scanner-5.0.1.3006-linux/bin:$PATH"

                    sonar-scanner \
                    -Dsonar.host.url=http://172.17.0.2:9000 \
                    -Dsonar.token="$SONAR_TOKEN" \
                    -Dsonar.projectKey=fastpi-demo \
                    -Dsonar.projectName=fastpi-demo \
                    -Dsonar.sources=app \
                    -Dsonar.tests=tests \
                    -Dsonar.python.version=3.11 \
                    -Dsonar.python.coverage.reportPaths=coverage.xml \
                    -Dsonar.sourceEncoding=UTF-8 \

                    rm -f scanner.zip
                '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t fastapi-app:latest .'
            }
        }
        stage('Deploy Container') {
            steps {
                sh 'docker run -d -p 8000:8000 fastapi-app:latest'
            }
        }
    }
    post {
        always {
            echo "Pipeline finished"
        }
    }
}